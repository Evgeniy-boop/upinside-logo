%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.5 (Build 18F132) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 462 114
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 462 114
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.1149059 0.55056709 0.97411507 sc
q
110.41588 88.193558 m
114.77258 88.193558 118.86897 87.412827 122.70518 85.851357 c
126.5414 84.289886 129.89561 82.082649 132.76796 79.229591 c
135.6403 76.376526 137.90536 72.935555 139.56322 68.90657 c
141.22108 64.877586 142.05 60.414928 142.05 55.518456 c
142.05 50.429214 141.22108 45.850891 139.56322 41.783348 c
137.90536 37.715809 135.6403 34.265202 132.76796 31.431416 c
129.89561 28.597631 126.5414 26.428953 122.70518 24.925312 c
118.86897 23.421673 114.77258 22.669863 110.41588 22.669863 c
109.0279 22.669863 107.64959 22.824081 106.28089 23.132519 c
104.91219 23.440958 103.56279 23.855417 102.23264 24.375908 c
100.9025 24.896399 99.59166 25.484352 98.300072 26.139786 c
97.008476 26.795218 95.765106 27.469919 94.569901 28.163906 c
94.569901 0.40453124 l
78.666092 0.40453124 l
78.666092 85.938103 l
82.483009 85.938103 l
88.786697 78.477776 l
90.213226 79.827194 91.774681 81.099487 93.471092 82.294685 c
95.167511 83.489891 96.931366 84.521217 98.762726 85.388702 c
100.59408 86.256187 102.49288 86.940521 104.45918 87.441742 c
106.42548 87.942955 108.41103 88.193558 110.41588 88.193558 c
h
17.306309 106.93113 m
17.306309 57.137753 l
17.306309 54.863014 17.740044 52.723251 18.607529 50.718399 c
19.475014 48.713543 20.660559 46.959324 22.1642 45.455685 c
23.667839 43.952042 25.4317 42.766499 27.45583 41.899014 c
29.479961 41.031528 31.629364 40.597794 33.904102 40.597794 c
36.178841 40.597794 38.328243 41.031528 40.352371 41.899014 c
42.376503 42.766499 44.140362 43.952042 45.644005 45.455685 c
47.147644 46.959324 48.333191 48.713543 49.200672 50.718399 c
50.068157 52.723251 50.501896 54.863014 50.501896 57.137753 c
50.501896 106.93113 l
67.099686 106.93113 l
67.099686 57.137753 l
67.099686 52.549725 66.232216 48.24128 64.497246 44.212296 c
62.762276 40.183311 60.391186 36.67487 57.383907 33.686867 c
54.376625 30.698862 50.858547 28.337412 46.829559 26.602442 c
42.800575 24.867472 38.492134 24 33.904102 24 c
29.316071 24 25.007627 24.867472 20.978643 26.602442 c
16.949657 28.337412 13.441216 30.698862 10.453213 33.686867 c
7.4652095 36.67487 5.1037588 40.183311 3.368789 44.212296 c
1.6338195 48.24128 0.76634765 52.549725 0.76634765 57.137753 c
0.76634765 106.93113 l
17.306309 106.93113 l
h
110.41588 72.34758 m
108.25681 72.34758 106.22307 71.962036 104.3146 71.190941 c
102.40614 70.419838 100.73866 69.311401 99.312126 67.865593 c
97.885597 66.419785 96.757889 64.65593 95.928955 62.573963 c
95.100021 60.492001 94.68557 58.14019 94.68557 55.518456 c
94.68557 53.01239 95.100021 50.71841 95.928955 48.636444 c
96.757889 46.554482 97.885597 44.780983 99.312126 43.315899 c
100.73866 41.850815 102.40614 40.713463 104.3146 39.903809 c
106.22307 39.094154 108.25681 38.689335 110.41588 38.689335 c
112.57495 38.689335 114.61833 39.094154 116.54607 39.903809 c
118.47382 40.713463 120.15093 41.850815 121.57746 43.315899 c
123.00399 44.780983 124.13171 46.554482 124.96063 48.636444 c
125.78957 50.71841 126.20403 53.01239 126.20403 55.518456 c
126.20403 58.14019 125.78957 60.492001 124.96063 62.573963 c
124.13171 64.65593 123.00399 66.419785 121.57746 67.865593 c
120.15093 69.311401 118.47382 70.419838 116.54607 71.190941 c
114.61833 71.962036 112.57495 72.34758 110.41588 72.34758 c
h
W
0 0 462 114 rc
-4.2336521 111.93113 m
147.05 111.93113 l
147.05 -4.5954685 l
-4.2336521 -4.5954685 l
h
f
Q
0.9132728 0.92537445 0.93775827 sc
q
169.40456 102.76723 m
169.40456 101.30214 169.12503 99.933464 168.56598 98.661156 c
168.00694 97.38884 167.2455 96.280403 166.28162 95.335808 c
165.31775 94.391212 164.19003 93.639404 162.89845 93.08036 c
161.60686 92.521317 160.22855 92.241798 158.76346 92.241798 c
157.29837 92.241798 155.92006 92.521317 154.62846 93.08036 c
153.33688 93.639404 152.21881 94.391212 151.27422 95.335808 c
150.32962 96.280403 149.5778 97.38884 149.01875 98.661156 c
148.45972 99.933464 148.18019 101.30214 148.18019 102.76723 c
148.18019 104.19376 148.45972 105.5528 149.01875 106.84438 c
149.5778 108.13597 150.32962 109.25405 151.27422 110.19864 c
152.21881 111.14323 153.33688 111.89504 154.62846 112.45409 c
155.92006 113.01314 157.29837 113.29266 158.76346 113.29266 c
160.22855 113.29266 161.60686 113.01314 162.89845 112.45409 c
164.19003 111.89504 165.31775 111.14323 166.28162 110.19864 c
167.2455 109.25405 168.00694 108.13597 168.56598 106.84438 c
169.12503 105.5528 169.40456 104.19376 169.40456 102.76723 c
h
166.68645 24 m
150.78264 24 l
150.78264 85.938103 l
166.68645 85.938103 l
166.68645 24 l
h
194.50365 24 m
178.71552 24 l
178.71552 85.938103 l
182.53242 85.938103 l
187.7373 79.923576 l
190.28192 82.23687 193.16386 84.020004 196.38319 85.273041 c
199.60252 86.52607 202.96638 87.15258 206.47488 87.15258 c
210.25327 87.15258 213.81953 86.429688 217.17381 84.983879 c
220.52808 83.538071 223.45821 81.552521 225.96428 79.027176 c
228.47035 76.501831 230.44626 73.552429 231.89206 70.178879 c
233.33788 66.805328 234.06076 63.210136 234.06076 59.393204 c
234.06076 24 l
218.27261 24 l
218.27261 59.393204 l
218.27261 61.012508 217.96419 62.54504 217.34731 63.990849 c
216.73042 65.436661 215.88223 66.69931 214.80269 67.778847 c
213.72316 68.858383 212.47014 69.706581 211.04361 70.323456 c
209.61708 70.940338 208.09419 71.248772 206.47488 71.248772 c
204.81702 71.248772 203.25557 70.940338 201.79048 70.323456 c
200.32541 69.706581 199.05312 68.858383 197.97357 67.778847 c
196.89404 66.69931 196.04584 65.436661 195.42897 63.990849 c
194.81209 62.54504 194.50365 61.012508 194.50365 59.393204 c
194.50365 24 l
h
279.2854 24 m
243.19823 24 l
243.19823 39.730312 l
279.2854 39.730312 l
280.36496 39.730312 281.29025 40.115856 282.06134 40.886951 c
282.83246 41.658051 283.21799 42.583355 283.21799 43.662891 c
283.21799 44.780983 282.83246 45.513515 282.06134 45.860508 c
281.29025 46.2075 280.36496 46.380997 279.2854 46.380997 c
262.86111 46.380997 l
260.12372 46.380997 257.55984 46.901478 255.16945 47.942459 c
252.77905 48.983444 250.69711 50.400314 248.9236 52.193115 c
247.15007 53.985916 245.75247 56.077488 244.73077 58.467892 c
243.70906 60.858292 243.19823 63.422153 243.19823 66.159554 c
243.19823 68.89695 243.70906 71.460808 244.73077 73.851212 c
245.75247 76.241615 247.15007 78.323547 248.9236 80.097069 c
250.69711 81.870598 252.77905 83.268188 255.16945 84.289894 c
257.55984 85.3116 260.12372 85.822441 262.86111 85.822441 c
294.84222 85.822441 l
294.84222 70.092133 l
262.86111 70.092133 l
261.78159 70.092133 260.85626 69.706589 260.08517 68.935486 c
259.31409 68.164391 258.92853 67.23909 258.92853 66.159554 c
258.92853 65.041458 259.31409 64.087242 260.08517 63.296864 c
260.85626 62.506489 261.78159 62.111309 262.86111 62.111309 c
279.2854 62.111309 l
281.98425 62.111309 284.52884 61.658295 286.91925 60.752254 c
289.30963 59.846214 291.39157 58.583561 293.1651 56.964256 c
294.93863 55.344952 296.34586 53.397961 297.38684 51.123222 c
298.42783 48.848484 298.9483 46.361732 298.9483 43.662891 c
298.9483 40.925495 298.42783 38.371273 297.38684 36.000145 c
296.34586 33.629021 294.93863 31.547089 293.1651 29.754288 c
291.39157 27.961485 289.30963 26.554253 286.91925 25.532549 c
284.52884 24.510845 281.98425 24 279.2854 24 c
h
325.95587 102.76723 m
325.95587 101.30214 325.67633 99.933464 325.11731 98.661156 c
324.55826 97.38884 323.79681 96.280403 322.83292 95.335808 c
321.86905 94.391212 320.74133 93.639404 319.44977 93.08036 c
318.15817 92.521317 316.77985 92.241798 315.31476 92.241798 c
313.84967 92.241798 312.47137 92.521317 311.17978 93.08036 c
309.88818 93.639404 308.77011 94.391212 307.82553 95.335808 c
306.88092 96.280403 306.12912 97.38884 305.57007 98.661156 c
305.01102 99.933464 304.73151 101.30214 304.73151 102.76723 c
304.73151 104.19376 305.01102 105.5528 305.57007 106.84438 c
306.12912 108.13597 306.88092 109.25405 307.82553 110.19864 c
308.77011 111.14323 309.88818 111.89504 311.17978 112.45409 c
312.47137 113.01314 313.84967 113.29266 315.31476 113.29266 c
316.77985 113.29266 318.15817 113.01314 319.44977 112.45409 c
320.74133 111.89504 321.86905 111.14323 322.83292 110.19864 c
323.79681 109.25405 324.55826 108.13597 325.11731 106.84438 c
325.67633 105.5528 325.95587 104.19376 325.95587 102.76723 c
h
395.12296 110.57455 m
395.12296 24 l
391.30606 24 l
385.17587 32.501308 l
383.67221 31.151888 382.08185 29.889235 380.40472 28.71331 c
378.72757 27.537386 376.96371 26.515697 375.1131 25.648212 c
373.26245 24.780727 371.36365 24.09639 369.41663 23.595177 c
367.4696 23.093962 365.49371 22.843359 363.48886 22.843359 c
359.13214 22.843359 355.03577 23.662638 351.19955 25.30122 c
347.36334 26.939802 344.00909 29.214506 341.13678 32.125401 c
338.26443 35.036293 335.99936 38.486904 334.34149 42.477333 c
332.68365 46.467766 331.85474 50.814762 331.85474 55.518456 c
331.85474 60.183598 332.68365 64.520958 334.34149 68.530663 c
335.99936 72.540375 338.26443 76.010262 341.13678 78.94043 c
344.00909 81.870598 347.36334 84.164581 351.19955 85.822441 c
355.03577 87.480301 359.13214 88.309219 363.48886 88.309219 c
364.87683 88.309219 366.31296 88.193558 367.79733 87.962227 c
369.28171 87.730896 370.72748 87.354996 372.13474 86.834503 c
373.54199 86.314011 374.86249 85.629669 376.09622 84.781464 c
377.32999 83.933258 378.37094 82.892288 379.21915 81.658539 c
379.21915 110.57455 l
395.12296 110.57455 l
h
435.48972 88.309219 m
438.07291 88.309219 440.59821 88.000786 443.06573 87.383904 c
445.53323 86.767029 447.8754 85.88028 450.09232 84.723633 c
452.30923 83.566986 454.3815 82.150116 456.30927 80.472977 c
458.237 78.795845 459.93338 76.916321 461.39847 74.834358 c
431.78848 39.151993 l
432.40536 38.959217 433.02222 38.833916 433.6391 38.776085 c
434.25598 38.71825 434.87283 38.689335 435.48972 38.689335 c
437.03192 38.689335 438.51627 38.901386 439.94278 39.325489 c
441.36932 39.749592 442.70908 40.356823 443.96213 41.147198 c
445.21515 41.937572 446.33322 42.901428 447.31638 44.038799 c
448.29953 45.176167 449.09952 46.43882 449.7164 47.826797 c
461.28281 36.20256 l
459.81772 34.120594 458.13098 32.25071 456.2225 30.592852 c
454.31406 28.934992 452.25137 27.52776 450.03448 26.371113 c
447.81757 25.214466 445.48505 24.337357 443.0368 23.739756 c
440.58856 23.142155 438.07291 22.843359 435.48972 22.843359 c
431.13303 22.843359 427.03662 23.653 423.20041 25.272305 c
419.3642 26.891609 416.00998 29.147036 413.13763 32.038651 c
410.26532 34.930267 408.00024 38.371239 406.34238 42.361671 c
404.68451 46.3521 403.85559 50.737652 403.85559 55.518456 c
403.85559 60.414928 404.68451 64.887222 406.34238 68.935486 c
408.00024 72.983749 410.26532 76.434364 413.13763 79.287422 c
416.00998 82.14048 419.3642 84.357353 423.20041 85.938103 c
427.03662 87.518852 431.13303 88.309219 435.48972 88.309219 c
h
323.23776 85.938103 m
323.23776 24 l
307.33395 24 l
307.33395 85.938103 l
323.23776 85.938103 l
h
363.48886 72.34758 m
361.32977 72.34758 359.29602 71.962036 357.38757 71.190941 c
355.4791 70.419838 353.82126 69.311401 352.414 67.865593 c
351.00677 66.419785 349.89832 64.65593 349.08868 62.573963 c
348.27902 60.492001 347.87421 58.14019 347.87421 55.518456 c
347.87421 53.243717 348.27902 51.084679 349.08868 49.041271 c
349.89832 46.99786 351.00677 45.205086 352.414 43.662891 c
353.82126 42.120697 355.4791 40.906235 357.38757 40.019474 c
359.29602 39.13271 361.32977 38.689335 363.48886 38.689335 c
365.64792 38.689335 367.68167 39.161625 369.59012 40.10622 c
371.4986 41.050816 373.16608 42.303829 374.59259 43.865303 c
376.01913 45.426777 377.14685 47.219551 377.97577 49.243683 c
378.80469 51.267815 379.21915 53.359383 379.21915 55.518456 c
379.21915 57.677532 378.80469 59.7691 377.97577 61.793232 c
377.14685 63.817364 376.01913 65.610138 374.59259 67.171608 c
373.16608 68.733086 371.4986 69.986099 369.59012 70.930695 c
367.68167 71.87529 365.64792 72.34758 363.48886 72.34758 c
h
435.48972 72.34758 m
433.33066 72.34758 431.29691 71.9524 429.38846 71.162018 c
427.47998 70.371643 425.82214 69.243935 424.41489 67.778847 c
423.00763 66.313759 421.8992 64.549904 421.08954 62.487217 c
420.27991 60.42453 419.87509 58.101635 419.87509 55.518456 c
419.87509 54.940132 419.90399 54.28471 419.96182 53.55217 c
420.01965 52.819626 420.11606 52.077454 420.25098 51.325634 c
420.38593 50.573814 420.54977 49.850922 420.74255 49.156933 c
420.93533 48.462944 421.18594 47.846077 421.49438 47.306309 c
421.49438 47.306309 l
439.88495 71.711426 l
439.1524 71.981308 438.42953 72.154808 437.71625 72.231911 c
437.00299 72.309021 436.26083 72.34758 435.48972 72.34758 c
h
W
0 0 462 114 rc
143.18019 118.29266 m
466.39847 118.29266 l
466.39847 17.843359 l
143.18019 17.843359 l
h
f
ep
end
%%Trailer
%%EOF
